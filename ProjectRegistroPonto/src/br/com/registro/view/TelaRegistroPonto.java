/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.registro.view;

import br.com.registro.entidade.Controle;
import br.com.registro.entidade.Funcionario;
import br.com.registro.modelo.ControleDAO;
import br.com.registro.modelo.FuncionarioDAO;
import br.com.registro.util.HoraUtil;
import br.com.registro.util.SoNumerosUtil;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author user_mw
 */
public class TelaRegistroPonto extends javax.swing.JInternalFrame {
//=============

    /**
     * Creates new form RegistroPonto
     */
    public TelaRegistroPonto() {
        initComponents();
        data();
        hora();
        jTextFieldCodigoFuncionario.setDocument(new SoNumerosUtil());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelHora = new javax.swing.JLabel();
        jLabelData = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCodigoFuncionario = new javax.swing.JTextField();
        jButtonRegistrar = new javax.swing.JButton();
        jLabelMessageErro = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(300, 400));

        jPanel1.setBackground(java.awt.SystemColor.inactiveCaptionBorder);

        jLabelHora.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabelHora.setForeground(new java.awt.Color(255, 0, 0));
        jLabelHora.setText("Hora");

        jLabelData.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabelData.setForeground(new java.awt.Color(255, 0, 0));
        jLabelData.setText("Data");
        jLabelData.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel3.setText("Digite o código do registro");

        jTextFieldCodigoFuncionario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButtonRegistrar.setText("Registrar");
        jButtonRegistrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });

        jLabelMessageErro.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelData, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldCodigoFuncionario)
                    .addComponent(jLabelMessageErro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRegistrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCodigoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMessageErro, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(350, 40, 300, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed
        // TODO add your handling code here:

        Funcionario funcionario = new Funcionario();
        Controle controle = new Controle();
        FuncionarioDAO daoFunc = new FuncionarioDAO();
        ControleDAO dao = new ControleDAO();

        DateFormat hora = new SimpleDateFormat("HH:mm");
        Date d = new Date();

        jLabelMessageErro.setText("");

        if (jTextFieldCodigoFuncionario.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Insira o código do funcionário", "Atetnção", JOptionPane.ERROR_MESSAGE);

        } else {

            funcionario.setIdFuncionario(Long.parseLong(jTextFieldCodigoFuncionario.getText()));

            long idFunc = 0;

            List<Funcionario> listaFuncionario = daoFunc.pesquisaPorCodigoFuncionario(funcionario.getIdFuncionario());

            for (Funcionario func : listaFuncionario) {

                idFunc = func.getIdFuncionario();

            }

            if (idFunc != funcionario.getIdFuncionario()) {

                jLabelMessageErro.setText("Funcionário não cadastrado");

            } else {

                try {
                    for (Funcionario func : listaFuncionario) {

                        funcionario.setNome(func.getNome());
                        funcionario.setCargo(func.getCargo());
                        funcionario.setSetor(func.getSetor());
                        funcionario.setTelefoneCelular(func.getTelefoneCelular());
                        funcionario.setRua(func.getRua());
                        funcionario.setNumero(func.getNumero());
                        funcionario.setBairro(func.getBairro());
                        funcionario.setCidade(func.getCidade());
                        funcionario.setDescricao(func.getDescricao());
                        funcionario.setData(func.getData());
                        funcionario.setSenha(func.getSenha());

                    }

                    controle.setFuncionario(funcionario);

                    Date data = new Date();

                    //===================================
                    // Hora de entrada
                    String horaEntradaOne = "08:00";
                    String horaEntradaLimite = "08:15";

                    //===================================
                    // Hora de almoço
                    String horaAlmocoOne = "12:00";
                    String horaAlmocoLimite = "12:15";

                    //===================================
                    // Hora de Retorno almoço
                    String horaRetornoOne = "13:00";
                    String horaRetornoLimite = "13:15";

                    //===================================
                    // Hora de Saída
                    String horaSaidaOne = "18:00";
                    String horaSaidaLimite = "18:15";

                    //===================================
                    // Hora de Extra
                    String horaExtraOne = "18:16";
                    String horaExtraLimite = "00:00";

                    hora.format(data);

                    //===================================
                    // Hora de entrada
                    Date horaOneEntrada = null;
                    horaOneEntrada = hora.parse(horaEntradaOne);

                    Date horaLimiteEntrada = null;
                    horaLimiteEntrada = hora.parse(horaEntradaLimite);

                    //===================================
                    // Hora de Almoço
                    Date horaOneAlmoco = null;
                    horaOneAlmoco = hora.parse(horaAlmocoOne);

                    Date horaLimiteAlmoco = null;
                    horaLimiteAlmoco = hora.parse(horaAlmocoLimite);

                    //===================================
                    // Hora de Retorno do Almoço
                    Date horaOneRetorno = null;
                    horaOneRetorno = hora.parse(horaRetornoOne);

                    Date horaLimiteRetorno = null;
                    horaLimiteRetorno = hora.parse(horaRetornoLimite);

                    //===================================
                    // Hora de Saída
                    Date horaOneSaida = null;
                    horaOneSaida = hora.parse(horaSaidaOne);

                    Date horaLimiteSaida = null;
                    horaLimiteSaida = hora.parse(horaSaidaLimite);

                    //===================================
                    // Hora Extra
                    Date horaOneExtra = null;
                    horaOneExtra = hora.parse(horaExtraOne);

                    Date horaLimiteExtra = null;
                    horaLimiteExtra = hora.parse(horaExtraLimite);

                    //---------------------------------------------------------
                    //Teste
                    if (data.getTime() < horaOneEntrada.getTime() || data.getTime() > horaLimiteExtra.getTime()) {

                        if (data.getTime() >= horaOneEntrada.getTime() && data.getTime() <= horaLimiteEntrada.getTime()) {

                            controle.setHoraEntrada(data);
                            controle.setData(data);
                            controle.setStatus("");
                            controle.setDescricao("");

                            if (dao.savar(controle)) {

                                jLabelMessageErro.setText("Entrada Registrada com sucesso");
                                jTextFieldCodigoFuncionario.setText("");

                            } else {

                                JOptionPane.showMessageDialog(null, "Erro ao registrar ponto. Contate o administrador do sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);

                            }

                        } else if (data.getTime() > horaLimiteEntrada.getTime() || data.getTime() < horaOneAlmoco.getTime()) {

                            JOptionPane.showMessageDialog(null, "Não é possivel registrar ponto de entrada depois das 08:15", "Atenção", JOptionPane.ERROR_MESSAGE);

                        } else if (data.getTime() >= horaOneAlmoco.getTime() && data.getTime() <= horaLimiteAlmoco.getTime()) {

                            controle.setHoraAlmoco(data);
                            controle.setData(data);
                            controle.setStatus("");
                            controle.setDescricao("");

                            if (dao.update(controle)) {

                                jLabelMessageErro.setText("Almoço Registrado com sucesso");
                                jTextFieldCodigoFuncionario.setText("");

                            } else {

                                JOptionPane.showMessageDialog(null, "Erro ao registrar ponto. Contate o administrador do sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);

                            }

                        } else if (data.getTime() > horaLimiteAlmoco.getTime() || data.getTime() < horaOneRetorno.getTime()) {

                            JOptionPane.showMessageDialog(null, "Não é possivel registrar ponto de Almoço depois das 12:15", "Atenção", JOptionPane.ERROR_MESSAGE);

                        } else if (data.getTime() >= horaOneRetorno.getTime() && data.getTime() <= horaLimiteRetorno.getTime()) {

                            controle.setHoraRetornoAlmoco(data);
                            controle.setData(data);
                            controle.setStatus("");
                            controle.setDescricao("");

                            if (dao.update(controle)) {

                                jLabelMessageErro.setText("Retorno do almoço Registrado com sucesso");
                                jTextFieldCodigoFuncionario.setText("");

                            } else {

                                JOptionPane.showMessageDialog(null, "Erro ao registrar ponto. Contate o administrador do sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);

                            }
                            

                        } else if (data.getTime() > horaLimiteRetorno.getTime() || data.getTime() < horaOneSaida.getTime()) {

                            JOptionPane.showMessageDialog(null, "Não é possivel registrar ponto de Retorno do almoço depois das 13:15", "Atenção", JOptionPane.ERROR_MESSAGE);

                        } else if (data.getTime() >= horaOneSaida.getTime() && data.getTime() <= horaLimiteSaida.getTime()) {

                            controle.setHoraSaida(data);
                            controle.setData(data);
                            controle.setStatus("");
                            controle.setDescricao("");

                            if (dao.update(controle)) {

                                jLabelMessageErro.setText("Saída Registrada com sucesso");
                                jTextFieldCodigoFuncionario.setText("");

                            } else {

                                JOptionPane.showMessageDialog(null, "Erro ao registrar ponto. Contate o administrador do sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);

                            }
                            
                            

                        } else if (data.getTime() >= horaOneExtra.getTime() && data.getTime() <= horaLimiteExtra.getTime()) {

                            controle.setHoraExtra(horaOneExtra);
                            controle.setData(data);
                            controle.setStatus("");
                            controle.setDescricao("");

                            if (dao.update(controle)) {

                                jLabelMessageErro.setText("Saída Registrada com sucesso");
                                jTextFieldCodigoFuncionario.setText("");

                            } else {

                                JOptionPane.showMessageDialog(null, "Erro ao registrar ponto. Contate o administrador do sistema.", "Atenção", JOptionPane.ERROR_MESSAGE);

                            }
                            
                            
                            
                        }

                    } else {

                        JOptionPane.showMessageDialog(null, "Fora do horário de trabalho", "Atenção", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (ParseException ex) {
                    Logger.getLogger(TelaRegistroPonto.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }//GEN-LAST:event_jButtonRegistrarActionPerformed

    //============================================================================
    public void data() {

        Date data = new Date();
        DateFormat formatador = DateFormat.getDateInstance(DateFormat.SHORT);
        jLabelData.setText(formatador.format(data));

        jLabelData.setHorizontalAlignment(javax.swing.JLabel.CENTER);

    }

    public void hora() {

        Timer hora = new Timer(1000, new HoraUtil());
        hora.start();

        jLabelHora.setHorizontalAlignment(javax.swing.JLabel.CENTER);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelData;
    public static javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelMessageErro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldCodigoFuncionario;
    // End of variables declaration//GEN-END:variables

}
